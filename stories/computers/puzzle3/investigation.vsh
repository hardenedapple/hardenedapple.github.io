vshcmd: > python
Python 3.8.1 (default, Jan 22 2020, 06:38:00) 
[GCC 9.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> 
vshcmd: > import math
vshcmd: > from analysis import *
>>> 
vshcmd: > with open('PNG.png', 'rb') as infile:
vshcmd: >   original_data = infile.read()
... ... >>> 
vshcmd: > chunk_list = parse_png(original_data)
>>> 
vshcmd: > output_data = output_png(chunk_list)
>>> 
vshcmd: > output_data == original_data
True
>>> 
vshcmd: > chunk_list
[CHUNK_tuple(length=13, name='IHDR', parsed_data=IHDR_tuple(width=100, height=30, bitdepth=1, color_type=3, method=0, filtermethod=0, interlacemethod=0), crc=3767871920),
CHUNK_tuple(length=6, name='PLTE', parsed_data=b'\x00\x00\x00\xff\xff\xff', crc=2782502877),
CHUNK_tuple(length=75, name='IDAT', parsed_data=b'\x18\x95c`\x00\x01&(\x06\x81\x06\x064\x0e\xb2\x00#\x98\xe4\x80pX\xa0\x18M\xdc\x01"\xa4\x00\xc5pq(G\x00\xae\x08I!\xd4\x16\xa8\x18#\x9aB\xa8\x00\x16\xd9\x06t#0\x8d\xc1\xc2A\x11h\x80y\x85\x015\x1c\x06\x0f\x00\x00\rW\x07\x89', crc=2088719649),
CHUNK_tuple(length=0, name='IEND', parsed_data=b'', crc=2923585666)]
>>> 
vshcmd: > chunk_copy = copy.deepcopy(chunk_list)
vshcmd: > alt_palette = b'\x00\xff\x00\x00\x00\xff'
vshcmd: > chunk_copy[1] = CHUNK_tuple(length=6, name='PLTE', parsed_data=alt_palette,
vshcmd: >                             crc=binascii.crc32(b'PLTE' + alt_palette))
vshcmd: > output_data = output_png(chunk_copy)
vshcmd: > with open('modified.png', 'wb') as outfile:
vshcmd: >   outfile.write(output_data)
>>> >>> ... >>> >>> ... ... 150
>>> 
vshcmd: > # There are 75 bytes describing the image.
vshcmd: > # The `bit depth` described in the IHDR says one bit describes each
vshcmd: > # pixel (by describing the palette index).
vshcmd: > len(chunk_copy[2].parsed_data)
75
>>> 
vshcmd: > # This number of bits in the IDAT chunk.
vshcmd: > 75 * 8
600
>>> 
vshcmd: > # This number of pixels to describe.
vshcmd: > 100 * 30
3000
>>> 
vshcmd: > from PIL import Image
vshcmd: > image = Image.open('modified.png')
vshcmd: > image.size
vshcmd: > len(list(image.getdata()))
>>> >>> (100, 30)
>>> 3000
>>> 
vshcmd: > image.show()
>>> 
vshcmd: > # According to the wikipedia page, the IDAT chunk is compressed
vshcmd: > # according to the compression algorithm described in the IHDR.
vshcmd: > import zlib
vshcmd: > decompressed_data = zlib.decompress(chunk_list[2].parsed_data)
vshcmd: > len(decompressed_data) * 8
>>> >>> 3360
>>> 
vshcmd: > # That seems to be pretty close to the number of bits needed, maybe
vshcmd: > # with some extra padding?
vshcmd: > # Let's do some small calculations to try and figure this out.
vshcmd: > # Number of bits per row.
vshcmd: > 3000 / 30
100.0
>>> 
vshcmd: > # Number of bytes per row.
vshcmd: > 100 / 8
12.5
>>> 
vshcmd: > # Assume need whole number of bytes per row, hence we get the below
vshcmd: > # number of bits per row.
vshcmd: > (13 * 8)
104
>>> 
vshcmd: > # Which results in the below number of extra bits in the entire image.
vshcmd: > 4 * 30
120
>>> 
vshcmd: > # Using the description in the link below, it seems each row has a
vshcmd: > # marker of the filter type, then information depending on what the
vshcmd: > # filter type was. (filter type is described in the wikipedia page,
vshcmd: > # but the description of how it's marked is not there)
vshcmd: > # https://stackoverflow.com/questions/39070976/how-to-decode-the-idat-chunk-of-a-png-file-with-no-compression
vshcmd: > # https://en.wikipedia.org/wiki/Portable_Network_Graphics
vshcmd: > # First row, "No filter", raw byte values.
vshcmd: > decompressed_data
b'\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x80\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00 \x00\x00\x00 \x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00@\x00\x00\x00@\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x00\x00\x80\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00@\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
>>> 
vshcmd: > decompressed_data[:4]
b'\x00\x00\x00\x00'
>>> 
vshcmd: > # Does that make sense in terms of the size of the data?
vshcmd: > # Number of extra bits to represent these "filter types" for each row
vshcmd: > # is just right to account for the discrepencies (240 + 120 = 360).
vshcmd: > 30 * 8
240
>>> 
vshcmd: > # Let's try and split the data into rows.
vshcmd: > def bit_iterator(data):
vshcmd: >   for byte in data:
vshcmd: >       for i in range(8):
vshcmd: >           yield 1 if byte & (2**i) else 0
vshcmd: > all_bits = list(bit_iterator(decompressed_data))
vshcmd: > all_pixels = list(image.getdata())
... ... ... ... >>> >>> >>> 
vshcmd: > # It seems there are 3 extra bits before the first non-zero one.
vshcmd: > # However, given the filter type byte above, there *should* be 8.
vshcmd: > all_bits.index(1)
vshcmd: > all_pixels.index(1)
49
>>> 46
>>> 
vshcmd: > # Moreover, the data has the same gap between these non-zero
vshcmd: > # elements, which seems to indicate these are the correct values.
vshcmd: > all_bits[3:103] == all_pixels[:100]
True
>>> 
vshcmd: > # It certainly doesn't seem to be the reverse row.
vshcmd: > all_bits[112:8:-1]
vshcmd: > all_pixels[:100]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
>>> [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
>>> 
vshcmd: > # Also, the next lines seem completely out.
vshcmd: > all_bits[103:].index(1)
vshcmd: > all_pixels[100:].index(1)
48
>>> 24
>>> 
vshcmd: > all_bits.count(1)
vshcmd: > all_pixels.count(1)
46
>>> 46
>>> 
vshcmd: > [i for i, x in enumerate(all_pixels) if x == 1]
vshcmd: > [i for i, x in enumerate(all_bits) if x == 1]
vshcmd: > [i for i, x in enumerate(all_bits[::-1]) if x == 1]
[46, 78, 124, 170, 216, 248, 294, 339, 384, 429, 461, 507, 552, 597, 642, 674, 720, 766, 811, 857, 889, 934, 980, 1025, 1071, 1103, 1149, 1195, 1241, 1287, 1319, 1364, 1410, 1456, 1488, 1533, 1579, 1625, 1671, 1717, 1749, 1795, 1840, 1885, 1930, 1962]
[49, 81, 151, 185, 255, 287, 321, 376, 427, 482, 514, 568, 619, 670, 725, 757, 811, 861, 916, 966, 998, 1053, 1103, 1158, 1192, 1244, 1294, 1328, 1398, 1432, 1484, 1535, 1589, 1639, 1671, 1726, 1760, 1830, 1864, 1934, 1966, 2000, 2071, 2106, 2161, 2193]
[1166, 1198, 1253, 1288, 1359, 1393, 1425, 1495, 1529, 1599, 1633, 1688, 1720, 1770, 1824, 1875, 1927, 1961, 2031, 2065, 2115, 2167, 2201, 2256, 2306, 2361, 2393, 2443, 2498, 2548, 2602, 2634, 2689, 2740, 2791, 2845, 2877, 2932, 2983, 3038, 3072, 3104, 3174, 3208, 3278, 3310]
>>> 
vshcmd: > # One byte for "No filter", and 13 bytes for the row.
vshcmd: > def next_row(data):
vshcmd: >   data_iter = iter(data)
vshcmd: >   filter_type = next(data_iter)
vshcmd: >   if filter_type != 0:
vshcmd: >       print('Unhandled filter type')
vshcmd: >       return
vshcmd: >   row_data = take_n_bytes(13, data_iter)
vshcmd: >   return list(bit_iterator(row_data))
... ... ... ... ... ... ... ... >>> 
vshcmd: > all_rows = []
vshcmd: > data_iter = iter(decompressed_data)
vshcmd: > currow = next_row(data_iter)
vshcmd: > while currow:
vshcmd: >   all_rows.append(currow)
vshcmd: >   currow = next_row(data_iter)
>>> >>> >>> ... ... ... Traceback (most recent call last):
  File "<stdin>", line 3, in <module>
  File "<stdin>", line 3, in next_row
StopIteration
>>> 
vshcmd: > # This took up all the data.
vshcmd: > len(list(itt.chain(*all_rows))) + (8 * len(all_rows)) == len(decompressed_data)*8
True
>>> 
vshcmd: > # Can see from the representation below that I have a supposed bit of colour in what I was assuming was the padding.
vshcmd: > # That indicates I'm putting the padding somewhere incorrectly.
vshcmd: > # That along with the evidence that the first interesting bit in the
vshcmd: > # first row is earlier in my parsed data than the image parsed data
vshcmd: > # implies that maybe my padding decision is wrong?
vshcmd: > # s/, /,/g | s/0/ /g | s/],/&\r/g
vshcmd: > print(all_rows)
[[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ]]
>>> 
vshcmd: > [list(x) for x in grouper(100, all_pixels)]
[[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ]]
>>> 
vshcmd: > [x.count(1) for x in all_rows]
[2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
>>> 
vshcmd: > [x.count(1) for x in [list(x) for x in grouper(100, all_pixels)]]
[2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
>>> 
vshcmd: > for row in [list(x) for x in grouper(100, all_pixels)]:
vshcmd: >   print([i for i, x in enumerate(row) if x == 1])
... ... [46, 78]
[24, 70]
[16, 48, 94]
[39, 84]
[29, 61]
[7, 52, 97]
[42, 74]
[20, 66]
[11, 57, 89]
[34, 80]
[25, 71]
[3, 49, 95]
[41, 87]
[19, 64]
[10, 56, 88]
[33, 79]
[25, 71]
[17, 49, 95]
[40, 85]
[30, 62]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
>>> 
vshcmd: > for row in all_rows:
vshcmd: >   print([i for i, x in enumerate(row) if x == 1])
... ... [41, 73]
[31, 65]
[23, 55, 89]
[32, 83]
[26, 58]
[0, 51, 102]
[45, 77]
[19, 69]
[12, 62, 94]
[37, 87]
[30, 64]
[4, 54, 88]
[46, 80]
[20, 71]
[13, 63, 95]
[38, 72]
[30, 64]
[22, 54, 88]
[47, 82]
[25, 57]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
>>> 
vshcmd: > # Try the same thing but taking the bits the other way around.
vshcmd: > def bit_iterator(data):
vshcmd: >   for byte in data:
vshcmd: >       for i in range(7, -1, -1):
vshcmd: >           yield 1 if byte & (2**i) else 0
vshcmd: > all_bits = list(bit_iterator(decompressed_data))
vshcmd: > all_pixels = list(image.getdata())
... ... ... ... >>> >>> >>> 
vshcmd: > all_rows = []
vshcmd: > data_iter = iter(decompressed_data)
vshcmd: > currow = next_row(data_iter)
vshcmd: > while currow:
vshcmd: >   all_rows.append(currow)
vshcmd: >   currow = next_row(data_iter)
>>> >>> >>> ... ... ... Traceback (most recent call last):
  File "<stdin>", line 3, in <module>
  File "<stdin>", line 3, in next_row
StopIteration
>>> 
vshcmd: > # The representation below seems to look pretty similar to what the
vshcmd: > # image library has produced.
vshcmd: > # s/, /,/g | s/0/ /g | s/],/&\r/g
vshcmd: > print(all_rows)
[[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ]]
>>> 
vshcmd: > [list(x) for x in grouper(100, all_pixels)]
[[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,1, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ],
[ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ]]
>>> 
vshcmd: > for row in [list(x) for x in grouper(100, all_pixels)]:
vshcmd: >   print([i for i, x in enumerate(row) if x == 1])
... ... [46, 78]
[24, 70]
[16, 48, 94]
[39, 84]
[29, 61]
[7, 52, 97]
[42, 74]
[20, 66]
[11, 57, 89]
[34, 80]
[25, 71]
[3, 49, 95]
[41, 87]
[19, 64]
[10, 56, 88]
[33, 79]
[25, 71]
[17, 49, 95]
[40, 85]
[30, 62]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
>>> 
vshcmd: > for row in all_rows:
vshcmd: >   print([i for i, x in enumerate(row) if x == 1])
... ... [46, 78]
[24, 70]
[16, 48, 94]
[39, 84]
[29, 61]
[7, 52, 97]
[42, 74]
[20, 66]
[11, 57, 89]
[34, 80]
[25, 71]
[3, 49, 95]
[41, 87]
[19, 64]
[10, 56, 88]
[33, 79]
[25, 71]
[17, 49, 95]
[40, 85]
[30, 62]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
>>> 
vshcmd: > # That was it!!  I was just taking the bits the wrong way around!!
vshcmd: > for pixel_row, value_row in zip(all_rows, [list(x) for x in grouper(100, all_pixels)]):
vshcmd: >   print(pixel_row[:100] == value_row)
... ... True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True
>>> 
vshcmd: > # Looking for something decribing how this data is actually stored in the image.
vshcmd: > # Hopefully the below webpage will help.
vshcmd: > # http://www.libpng.org/pub/png/book/chapter09.html
vshcmd: > #
vshcmd: > # Thing
vshcmd: > #     1) Filtering operates on bytes not pixels.
vshcmd: > #         Don't think this is important, since the filtering is zero for every line.
vshcmd: > #     2) Rule of thumb -- filters are rarely useful on palette images, so don't even bother.
vshcmd: > len(next_row(decompressed_data))
104
>>> 
vshcmd: > next_row(decompressed_data).index(1)
41
>>> 
vshcmd: > list(bit_iterator(decompressed_data[1:14][::-1])).index(1)
25
>>> 
vshcmd: > decompressed_data[14:28]
b'\x00\x00\x00\x00\x80\x00\x00\x00\x00\x02\x00\x00\x00\x00'
>>> 
vshcmd: > decompressed_data[14:28]
vshcmd: > all_bits[127:227]
vshcmd: > all_pixels[100:200]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
>>> 
vshcmd: > all_bits[127:227] == all_pixels[100:]
False
>>> 
vshcmd: > bin(
vshcmd: > original_data[16:31]
b'\x00\x00\x00d\x00\x00\x00\x1e\x01\x03\x00\x00\x00\xe0\x95'
>>> 
vshcmd: > parse_ihdr(original_data[16:])
IHDR_tuple(width=100, height=30, bitdepth=1, color_type=3, method=0, filtermethod=0, interlacemethod=0)
>>> 
vshcmd: > parse_chunk(original_data[8:])
CHUNK_tuple(length=13, name='IHDR',
parsed_data=IHDR_tuple(width=100,
 height=30,
 bitdepth=1,
 color_type=3,
 method=0,
 filtermethod=0,
 interlacemethod=0))
>>> 
vshcmd: > data_iter = iter(original_data)
vshcmd: > parse_file_header(data_iter)
vshcmd: > parse_chunk(data_iter)
vshcmd: > parse_chunk(data_iter)
vshcmd: > parse_chunk(data_iter)
vshcmd: > parse_chunk(data_iter)
>>> True
>>> CHUNK_tuple(length=13, name='IHDR', parsed_data=IHDR_tuple(width=100, height=30, bitdepth=1, color_type=3, method=0, filtermethod=0, interlacemethod=0))
>>> CHUNK_tuple(length=6, name='PLTE', parsed_data=PLTE_tuple(data=b'\x00\x00\x00\xff\xff\xff'))
>>> CHUNK_tuple(length=75, name='IDAT', parsed_data=IDAT_tuple(data=b'\x18\x95c`\x00\x01&(\x06\x81\x06\x064\x0e\xb2\x00#\x98\xe4\x80pX\xa0\x18M\xdc\x01"\xa4\x00\xc5pq(G\x00\xae\x08I!\xd4\x16\xa8\x18#\x9aB\xa8\x00\x16\xd9\x06t#0\x8d\xc1\xc2A\x11h\x80y\x85\x015\x1c\x06\x0f\x00\x00\rW\x07\x89'))
>>> CHUNK_tuple(length=0, name='IEND', parsed_data=b'')
>>> ... ... ... ... ... ... >>> 
vshcmd: > found_chunks = parse_png(original_data)
>>> 
vshcmd: > print([x for x in found_chunks if x.name == 'IDAT'])
[CHUNK_tuple(length=75, name='IDAT', parsed_data=IDAT_tuple(data=b'\x18\x95c`\x00\x01&(\x06\x81\x06\x064\x0e\xb2\x00#\x98\xe4\x80pX\xa0\x18M\xdc\x01"\xa4\x00\xc5pq(G\x00\xae\x08I!\xd4\x16\xa8\x18#\x9aB\xa8\x00\x16\xd9\x06t#0\x8d\xc1\xc2A\x11h\x80y\x85\x015\x1c\x06\x0f\x00\x00\rW\x07\x89'))]
>>> 
vshcmd: > remaining = bytes(data_iter)
vshcmd: > remaining
vshcmd: > take_n_bytes(0, data_iter)
vshcmd: > parse_chunk(remaining)
CHUNK_tuple(length=0, name='IEND', parsed_data=b'')
>>> >>> ... ... ... ... ... ... ... ... ... ... ... ... >>> 
vshcmd: > len(remaining)
vshcmd: > remaining
b'\x00\x00\x00\x00IENDb'\xaeB`\x82'
>>> >>> ... ... ... ... >>> ... ... ... ... ... >>> >>> 
vshcmd: > parse_ihdr(original_data)
IHDR_tuple(width=2303741511, height=218765834, bitdepth=0, color_type=0, method=0, filtermethod=13, interlacemethod=73)
>>> 
